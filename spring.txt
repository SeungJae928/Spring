스프링 동작 환경

스프링 부트 템플릿엔진 기본 매핑 - resouces:templates/ *name.html

내장 서버에서 컨테이너의 컨트롤러를 실행 -> 반환값(= *name)을 viewResolver가 해당 파일을 찾아서 처리

스프링 부트는 동작을 할 때 컨테이너의 컨트롤러를 찾고, 컨트롤러가 있는 경우 해당 컨트롤러를 실행, 없는 경우에는 hello-static.html을 실행함

일반적인 웹 애플리케이션 구조

Controller - 웹 mvc 컨트롤러
Service - 핵심 비즈니스 로직 구현
Repository - DB에 접근, 도메인의 객체를 DB에 저장 및 관리
Domain - 비즈니스 도메인 객체 -> 입문편 강의 기준으로 Member 객체를 말함

테스트케이스 작성 요령?

@Test 어노테이션을 붙여서 테스트를 진행
단축키(ctrl + shift + t)로 현재 클래스의 테스트케이스를 만들 수 있음

테스트는 독립적으로 실행되어야 좋은 테스트임

테스트케이스에 유용한? 어노테이션

@AfterEach - 테스트를 하고나서 해당 메서드가 실행될 수 있도록하는 어노테이션
		테스트를 진행하면 DB에 데이터가 계속 적재될 수 있으므로 이를 통해 관리를 할 수 있음

@BeforeEach - 테스트를 하기 전에 해당 메서드가 실행되어 새로운 객체를 생성하여 테스트의 결과가 다른 테스트에 영향이 없도록 함

@SpringBootTest - 스프링 컨테이너와 테스트를 동시에 실행함

@Transactional - 테스트 전에 해당 어노테이션을 실행하고 테스트 완료 후에는 데이터를 롤백함
		     이를 하지 않을 경우 DB에 데이터가 남아 다음 테스트에 영향을 줄 수 있음

Bean

컨트롤러가 서비스, 리포지토리를 사용할 수 있게 빈을 등록해야함

스프링 컨테이너의 같은 스프링 빈의 인스턴스는 웬만하면 하나의 인스턴스를 공유함

컴포넌트 스캔 - 
@Component 어노테이션을 포함하는 경우 스프링에서 자동으로 스프링 빈에 등록함
@Controller, @Service, @Repository는 모두 @Component를 포함하므로 자동으로 등록됨
일반적으로 정형화된 코드는 컴포넌트 스캔을 사용함

자바 코드를 통해 직접 스프링 빈 등록
SpringConfig 클래스에 @Configuration를 작성하고, 빈으로 등록하고 싶은 것을 @Bean을 붙이고 해당 클래스를 반환하여 직접 스프링 빈 등록이 가능함
정형화 되지 않거나 구현 클래스를 변경해야하는 경우 이 방법을 사용하여 등록하는 것이 좋음

의존관계 주입

@Autowired는 스프링에서 자동으로 연관된 객체를 스프링 컨테이너에서 찾아서 넣어줌 -> 스프링이 관리하는 객체가 아닌경우 동작하지 않음

위의 경우를 DI라고 하는데 이것도 세가지로 나뉨
-필드 주입
-세터 주입
-생성자 주입

의존관계 주입은 동적으로 변하는 경우가 거의 없음, 웬만하면 생성자 주입을 권장함

DB

DataSource - DB 커넥션을 획득할 때 사용함, 스프링은 이를 바탕으로 DataSource를 생성후 빈으로 만듬 이를 통해 DI를 받음

OCP(Open-Closed Principle) - 확장 O , 수정 및 변경 X

스프링의 DI를 이용할 경우 위의 원칙을 지키면서 스프링 설정만으로 구현 클래스를 변경할 수 있음

JPA는 도메인에 @Entity를 통해 매핑을 하고 EntityManager를 만들어 객체를 관리함
그리고 JPA를 통한 모든 데이터 변경은 @Transaction 안에서 실행해야 한다고함
(JPA는 따로 공부를 더 해야될 것 같음)

SpringDataJPA는 JPA를 편리하게 하는 기술 -> JPA를 숙지해야함

SpringDataJPA는 인터페이스로 구현함 상속받는 JpaRepository는 대부분의 등록, 가입, 조회 등의 메서드가 구현되어 있음
메서드의 이름만으로 조회를 할 수 있게 해준다. ex) findByName, findByNameAndId ...

AOP -> 아직 이해 못함

핵심 관심사항과 공통 관심사항을 분리
공통 로직을 따로 만들어서 관리할 수 있음 또한 로직을 원하는 곳에만 적용하여 실행할 수 있음
변경이 필요하거나 문제가 생길경우 해당 로직만 변경하면됨














